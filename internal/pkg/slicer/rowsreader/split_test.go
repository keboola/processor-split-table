package rowsreader

func getSplitRowsFuncTestData() []testDataForFunc {
	return []testDataForFunc{
		{
			comment:         "Empty data -> no token",
			data:            []byte(""),
			atEOF:           false,
			expectedAdvance: 0,
			expectedToken:   nil,
			expectedErr:     nil,
		},
		{
			comment:         "Empty data at the end -> no token",
			data:            []byte(""),
			atEOF:           true,
			expectedAdvance: 0,
			expectedToken:   nil,
			expectedErr:     nil,
		},
		{
			comment:         "One row",
			data:            []byte("abc,def\n"),
			atEOF:           false,
			expectedAdvance: 8,
			expectedToken:   []byte("abc,def\n"),
			expectedErr:     nil,
		},
		{
			comment:         "One row at the end",
			data:            []byte("abc,def\n"),
			atEOF:           true,
			expectedAdvance: 8,
			expectedToken:   []byte("abc,def\n"),
			expectedErr:     nil,
		},
		{
			comment:         "Two rows -> first row parsed",
			data:            []byte("abc,def\nfgh,xyz\n"),
			atEOF:           false,
			expectedAdvance: 8,
			expectedToken:   []byte("abc,def\n"),
			expectedErr:     nil,
		},
		{
			comment:         "Two rows at the end -> first row parsed",
			data:            []byte("abc,def\nfgh,xyz\n"),
			atEOF:           true,
			expectedAdvance: 8,
			expectedToken:   []byte("abc,def\n"),
			expectedErr:     nil,
		},
		{
			comment:         "Incomplete row -> load more data",
			data:            []byte("abc,def"),
			atEOF:           false,
			expectedAdvance: 0,
			expectedToken:   nil,
			expectedErr:     nil,
		},
		{
			comment:         "Incomplete row with enclosure -> load more data",
			data:            []byte("\"abc\",\"def\""),
			atEOF:           false,
			expectedAdvance: 0,
			expectedToken:   nil,
			expectedErr:     nil,
		},
		{
			comment:         "Incomplete row at the end -> ok, last row without new line",
			data:            []byte("abc,def"),
			atEOF:           true,
			expectedAdvance: 7,
			expectedToken:   []byte("abc,def"),
			expectedErr:     nil,
		},
		{
			comment:         "Row with enclosures 1",
			data:            []byte("\"abc\"\n"),
			atEOF:           false,
			expectedAdvance: 6,
			expectedToken:   []byte("\"abc\"\n"),
			expectedErr:     nil,
		},
		{
			comment:         "Row with enclosures 2",
			data:            []byte("\"abc\",def,\"xyz\"\n"),
			atEOF:           false,
			expectedAdvance: 16,
			expectedToken:   []byte("\"abc\",def,\"xyz\"\n"),
			expectedErr:     nil,
		},
		{
			comment:         "Row with enclosures 3",
			data:            []byte("\"abc\",\"def\",\"xyz\"\n"),
			atEOF:           false,
			expectedAdvance: 18,
			expectedToken:   []byte("\"abc\",\"def\",\"xyz\"\n"),
			expectedErr:     nil,
		},
		{
			comment:         "Unfinished enclosure 1 -> load more data",
			data:            []byte("\""),
			atEOF:           false,
			expectedAdvance: 0,
			expectedToken:   nil,
			expectedErr:     nil,
		},
		{
			comment:         "Unfinished enclosure 2 -> load more data",
			data:            []byte("\"abc\",\"def"),
			atEOF:           false,
			expectedAdvance: 0,
			expectedToken:   nil,
			expectedErr:     nil,
		},
		{
			comment:         "Unfinished enclosure at the end -> return last row",
			data:            []byte("\"abc\",\"def"),
			atEOF:           true,
			expectedAdvance: 10,
			expectedToken:   []byte("\"abc\",\"def"),
			expectedErr:     nil,
		},
		{
			comment:         "Unfinished enclosure with new line 1 -> load more data",
			data:            []byte("\"\n"),
			atEOF:           false,
			expectedAdvance: 0,
			expectedToken:   nil,
			expectedErr:     nil,
		},
		{
			comment:         "Unfinished enclosure with new line 2 -> load more data",
			data:            []byte("\"abc\n\",\"def\n"),
			atEOF:           false,
			expectedAdvance: 0,
			expectedToken:   nil,
			expectedErr:     nil,
		},
		{
			comment:         "Unfinished enclosure with new line at the end -> return last row",
			data:            []byte("\"abc\n\",\"def\n"),
			atEOF:           true,
			expectedAdvance: 12,
			expectedToken:   []byte("\"abc\n\",\"def\n"),
			expectedErr:     nil,
		},
		{
			comment:         "One row with escaped new line",
			data:            []byte("\"abc\nxyz\",\"\ndef\n\"\n"),
			atEOF:           false,
			expectedAdvance: 18,
			expectedToken:   []byte("\"abc\nxyz\",\"\ndef\n\"\n"),
			expectedErr:     nil,
		},
		{
			comment:         "One row at the end with escaped new line",
			data:            []byte("\"abc\nxyz\",\"\ndef\n\"\n"),
			atEOF:           true,
			expectedAdvance: 18,
			expectedToken:   []byte("\"abc\nxyz\",\"\ndef\n\"\n"),
			expectedErr:     nil,
		},
		{
			comment:         "Two rows with escaped new line",
			data:            []byte("\"abc\nxyz\",\"\ndef\n\"\n\"123\n\",\"456\n\""),
			atEOF:           false,
			expectedAdvance: 18,
			expectedToken:   []byte("\"abc\nxyz\",\"\ndef\n\"\n"),
			expectedErr:     nil,
		},
		{
			comment:         "Two rows at the end with escaped new line",
			data:            []byte("\"abc\nxyz\",\"\ndef\n\"\n\"123\n\",\"456\n\""),
			atEOF:           true,
			expectedAdvance: 18,
			expectedToken:   []byte("\"abc\nxyz\",\"\ndef\n\"\n"),
			expectedErr:     nil,
		},
	}
}
